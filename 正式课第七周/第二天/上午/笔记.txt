浏览器的内核和渲染引擎
  谷歌(Safari)  webkit(V8)
  火狐  Gecko
  IE   Trident
  欧朋  Presto

  [中国特色浏览器->没有自己的内核,他们只是比别家的浏览器皮肤好看一些]
  360浏览器(极速版)
  猎豹浏览器
  QQ浏览器
  搜狗浏览器(极速版)
  百度浏览器
  UC浏览器
  世界之窗
  遨游浏览器
  ...

  手机端浏览器(QQ、百度、UC、手机内置..)都是webkit内核的(IOS和安卓系统下)


什么是浏览器的内核(或者渲染引擎)?
  W3C(万维网联盟),编程语言标准制定的一个非盈利性机构
  ->开发者按着制定的标准去编写代码(面试要求严格掌握W3C规范)
  ->浏览器开发商也要按照标准把对应的代码渲染成相关的页面和效果

  -webkit-  谷歌(Safari)
  -moz- 火狐
  -ms-  IE
  -o-   欧朋

=======================================================
JS是一门基于客户端浏览器运行的轻量级的脚本编程语言(客户端脚本编程语言) =>这句话目前已经是不对的了
JS是一门全栈编程语言(JAVA、PHP、C#这些也都是全栈编程语言)
  ->可以编写客户端的程序(把JS代码在客户端的浏览器中运行)
  ->可以编写服务器端的程序(把JS代码在服务器端的NODE环境下运行)

==============================================
1、what's node
  NODE不是编程语言,它没有自己的语法规范,它只是一个工具或者一个环境平台,用来渲染和解析JS的环境平台,类似于谷歌浏览器；它的生产场景和作用：在真实项目中，我们会把NODE安装到服务器上，这样的话，我们就可以在服务器端使用JS代码编写一些业务处理了，把编写好的JS代码直接的运行在NODE环境下即可；

  =>NODE解析和渲染JS是基于webkit内核(V8引擎)来操作的，用NODE渲染JS来开发后台程序，比其他的JAVA或者PHP语言等都要快

  =>NODE环境中提供了无阻塞的I/O操作(文件或者文件目录的增删改查操作)
    A:JS在客户端浏览器中运行的时候,能否操作客户端本地的文件?
      肯定不能，这样的话才能保证客户端的安全，否则访问别人的网站很有可能造成自己信息泄露以及更多安全问题
      <input type='file'/> 这个是浏览器提供的功能，用户可以自主性选择需要上传的文件

    B:JS在服务器NODE环境下运行的时候,能否操作服务器上的文件?
      是可以操作的,也就是在服务器运行的时候我们可以拿JS中的一些方法(NODE环境提供的)操作服务器上的文件

    C:JAVA等语言在读取文件中的内容的时候，一般都是把问件中内容读取完成后才可以做后面的事情(同步)，但是NODE中给JS提供了同步读取和异步读取两个方法(无阻塞的I/O操作指的是异步读取)

  =>基于事件驱动的单线程异步操作

===================================================
客户端浏览器的全局对象window,提供给我们JS很多常用的操作方法：navigator.userAgent、JSON(.parse/.stringify)、getComputedStyle、setTimeout/setInterval、open、close、alert、confirm、prompt、eval...

NODE和浏览器一样，也提供了一个全局对象global，在这个全局对象中也提供了一系列的方法供JS使用。NODE中是按照模块的概念划分方法的：

1、内置模块(NODE环境天生自带的)


2、自定义模块(我们自己编写的)
  在NODE环境下,创建的每一个JS文件都是一个独立的模块，不同模块之间的方法是不冲突的(哪怕方法名是一样的)

  想要在public模块中调取utils模块中的fn方法?
  1)utils暴露供被人使用的方法
    module.exports={fn:fn}

  2)在public中导入utils模块
    var utils=require('./m/utils');
    utils.fn();

3、第三方模块(别人写好的我们来用)
  搜索：所有的第三方模块都在 https://www.npmjs.com/ 这个网站中，我们要用的话只需要在这个网站中找即可

  下载：在NODE环境下需要下载安装第三方模块需要使用命令(npm:就是NODE模块管理的命令)
    npm install less(less就是我么需要安装的模块名称) ->安装成功后会在当前的安装目录下创建一个node_modules文件夹,这个文件夹中包含了我们需要使用的模块

  卸载：npm uninstall less

  导入：在我们的JS程序中把安装完成的第三方模块导入进来,导入进来后就可以调取模块中提供的方法了
      var lC = require('less');
      lC.render();//->render就是LESS模块中提供的一个方法


  作业：
    npm install less -g 把LESS模块安装到全局下(写在全局的也需要在后面加-g)
    lessc -v 查看是否安装成功


==================================
如何把JS代码放在NODE环境下运行?
1、在WB的某一个JS中，如果需要把这些代码在NODE中执行，只需要：鼠标右键->Run xxx.js 即可，在WB的控制台中就可以输出执行完成后的结果了

2、在当前的项目目录中打开DOS命令窗口(shift+右键,在此处打开命令窗口 或者 直接在当前目录地址栏中输入cmd)，在打开的DOS窗口中执行 node xxx.js 即可

建议大家使用第二种，因为第一种在某些时候会存在路径的缓存

=============================
在NODE下定义三个自定义模块:A、B、C
A:sum 实现任意数求和
B:avg 实现求平均数(先算和然后在算平均数，也就是在B模块中需要调取A模块中的sum方法)
C:直接调取B中的avg方法算出1,2,3,4,5,6几个数字的平均数









































